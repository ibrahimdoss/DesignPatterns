package ToastSolution;

public enum SolutionNotes {
	
	//TODO cözümü SolutionNotesContinue
	
//	• Çözüm, miras (inheritance) ile is-a ilişkisi yerine nesne bileşimi (object compositon) ile 
//	has-a ilişkisini kullanmada yatar.
//	
//	• Yeni sorumlulukları yeni alt sınıflarla yerine gtirmektense, alt sınıf ihtiyacını doğuran şeyi 
//	bir dekorasyon/bezeme malzemesi, nesnesi olarak görmek ve sınıfın nesnelerine eklemek daha sağlıklıdır.
//	
//	• Bu şekilde nesnenin en basit halinden başlayarak farklı dekorasyonlar uygulamak mümkün olacaktır.
	
	//TODO IMPORTANT
//	• GoF’un ikinci prensibi:
//		Favor object composition over class inheritance.
//		Nesne bileşimini sınıf kalıtımına tercih et.
	
//	• Sınıf kalıtımı, bir derleme zamanı yapısıdır ve çalışma zamanında değişemez.
//	
//	• Nesne bileştirmesi (object composition) ise çalışma zamanında yapılabilir.
//	
//	• Dolayısıyla, kalıtım (inheritance) statik, bileştirme ise dinamik bir yapıdır.
//	
//	• Bu sebeple bileştirme, çok sayıda farklı durumu ifade etmede esneklik sağlar.
	
}
